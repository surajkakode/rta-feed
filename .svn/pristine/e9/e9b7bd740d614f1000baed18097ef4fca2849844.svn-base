package testBase;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;
import customListener.WebEventListener;
import io.github.bonigarcia.wdm.ChromeDriverManager;
import io.github.bonigarcia.wdm.DriverManagerType;
import org.apache.commons.io.FileUtils;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeDriverService;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.events.EventFiringWebDriver;
import org.testng.ITestResult;
import org.testng.Reporter;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

public class TestBase {

    public static final Logger log = Logger.getLogger(TestBase.class.getName());

    public static WebDriver dr;
    public static EventFiringWebDriver driver;
    public WebEventListener eventListener;
    public static String url = null;

    Properties properties =new Properties();
    public static ExtentReports extent;
    public static ExtentTest test;
    public ITestResult result;


    public void loadConfigFile() throws IOException {
        try {
            File file= new File(System.getProperty("user.dir")+"\\src\\main\\java\\config\\properties");
            FileInputStream fileInputStream = new FileInputStream(file);
            properties.load(fileInputStream);
        } catch (IOException e) {
            log.error(e,e);
        }
    }


    static {
        Calendar calendar = Calendar.getInstance();
        SimpleDateFormat formater = new SimpleDateFormat("dd_MM_yyyy_hh_mm_ss");
        extent = new ExtentReports(System.getProperty("user.dir")+"\\src\\main\\java\\reports\\test" + formater.format(calendar.getTime()) + ".html", false);
    }

    public void init()  {
        /*try {
            loadConfigFile();
        } catch (IOException e) {
            e.printStackTrace();
        }*/

        //this.url = properties.getProperty("url");
        //selectBrowser(properties.getProperty("browser"));
        try {
            selectBrowser(System.getProperty("browser"));
        } catch (IOException e) {
            log.error(e);
        }
        //getUrl(url);
        driver.manage().window().maximize();
        String log4jConfPath = "log4j.properties";
        PropertyConfigurator.configure(log4jConfPath);

    }

    public void selectBrowser(String browser) throws IOException {

        if (browser == null)
        {
           // throw new RuntimeException(browser + " is not a parameter!");
            browser = "headlessChrome";
        }


        if (browser.isEmpty())
        {
            // throw new RuntimeException(browser + " is empty!");
            browser = "headlessChrome";
        }


        if(browser.equalsIgnoreCase("firefox"))
        {
            System.setProperty("webdriver.gecko.driver", System.getProperty("user.dir")+ File.separator+"Drivers"+File.separator+"geckodriver.exe");
            log.debug("Creating the object of "+ driver);
            this.dr = new FirefoxDriver();
            driver = new EventFiringWebDriver(dr);
            eventListener = new WebEventListener();
           // driver.register(eventListener);
            driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
            driver.manage().window().maximize();

        }
        else if(browser.equalsIgnoreCase("chrome"))
        {
            String downloadFilepath =getDownloadPath();

            System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")+File.separator+"Drivers"+File.separator+"chromedriver.exe");

            HashMap<String, Object> chromePrefs = new HashMap<String, Object>();
            chromePrefs.put("profile.default_content_settings.popups", 0);
            chromePrefs.put("download.default_directory", downloadFilepath);
            ChromeOptions options = new ChromeOptions();
            options.setExperimentalOption("prefs", chromePrefs);

             this.dr = new ChromeDriver(options);

            driver = new EventFiringWebDriver(dr);
            eventListener = new WebEventListener();
            driver.register(eventListener);
            driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
            driver.manage().window().maximize();
        }
        else if(browser.equalsIgnoreCase("headlessChrome"))
        {
            System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")+File.separator+"Drivers"+File.separator+"chromedriver.exe");

            //To setup headless chrome
            ChromeDriverManager.getInstance(DriverManagerType.CHROME);
            ChromeOptions chromeOptions = new ChromeOptions();

            chromeOptions.addArguments("--headless","window-size=1920,1080", "--no-sandbox");
            chromeOptions.addArguments("--test-type");
            chromeOptions.addArguments("--disable-extensions"); //to disable browser extension popup

            ChromeDriverService driverService = ChromeDriverService.createDefaultService();
            ChromeDriver dr = new ChromeDriver(driverService, chromeOptions);

            String downloadFilepath =getDownloadPath();
            Map<String, Object> commandParams = new HashMap<>();
            commandParams.put("cmd", "Page.setDownloadBehavior");
            Map<String, String> params = new HashMap<>();
            params.put("behavior", "allow");
            params.put("downloadPath", downloadFilepath );
            commandParams.put("params", params);
            ObjectMapper objectMapper = new ObjectMapper();
            CloseableHttpClient httpClient = HttpClientBuilder.create().build();
            String command = objectMapper.writeValueAsString(commandParams);
            String u = driverService.getUrl().toString() + "/session/" + dr.getSessionId() + "/chromium/send_command";
            HttpPost request = new HttpPost(u);
            request.addHeader("content-type", "application/json");
            request.setEntity(new StringEntity(command));
            httpClient.execute(request);

            driver = new EventFiringWebDriver(dr);
            eventListener = new WebEventListener();
            driver.register(eventListener);
            driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        }
    }

    public String getDownloadPath()
    {
        String path= System.getProperty("downloadPath");
        if (path==null || path.equalsIgnoreCase("undefined") )
        {
            path = System.getProperty("user.dir")+File.separator+"download";
        }
        log.info(path);
        return path;
    }

    public void getUrl(String url)
    {

        log.debug("Navigating to : "+ url);
        //driver.get(url);
    }
    public void getScreenShot(String name) {

        Calendar calendar = Calendar.getInstance();
        SimpleDateFormat formater = new SimpleDateFormat("dd_MM_yyyy_hh_mm_ss");


        File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);

        try {
            String reportDirectory = new File(System.getProperty("user.dir")).getAbsolutePath() + "\\src\\main\\java\\screenshots\\";
            File destFile = new File((String) reportDirectory + name + "_" + formater.format(calendar.getTime()) + ".png");
            FileUtils.copyFile(scrFile, destFile);
            // This will help us to link the screen shot in testNG report
            Reporter.log("<a href='" + destFile.getAbsolutePath() + "'> <img src='" + destFile.getAbsolutePath() + "' height='100' width='100'/> </a>");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }



    public String captureScreen(String fileName) {
        if (fileName == "") {
            fileName = "blank";
        }
        File destFile = null;
        Calendar calendar = Calendar.getInstance();
        SimpleDateFormat formater = new SimpleDateFormat("dd_MM_yyyy_hh_mm_ss");

        File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);

        try {
            String reportDirectory = new File(System.getProperty("user.dir")).getAbsolutePath() + "\\src\\main\\java\\screenshots\\failedScreenshots\\failure_screenshots";
            destFile = new File((String) reportDirectory + fileName + "_" + formater.format(calendar.getTime()) + ".png");
            FileUtils.copyFile(scrFile, destFile);
            // This will help us to link the screen shot in testNG report
            Reporter.log("<a href='" + destFile.getAbsolutePath() + "'> <img src='" + destFile.getAbsolutePath() + "' height='100' width='100'/> </a>");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return destFile.toString();
    }

    public void log(String data) {
        log.debug(data);
        Reporter.log(data);
        test.log(LogStatus.INFO, data);
    }

    public void getresult(ITestResult result) {
        if (result.getStatus() == ITestResult.SUCCESS) {
            test.log(LogStatus.PASS, result.getName() + " test is pass");
        } else if (result.getStatus() == ITestResult.SKIP) {
            test.log(LogStatus.SKIP, result.getName() + " test is skipped and skip reason is:-" + result.getThrowable());
        } else if (result.getStatus() == ITestResult.FAILURE) {
            test.log(LogStatus.ERROR, result.getName() + " test is failed" + result.getThrowable());
            String screen = captureScreen("");
            test.log(LogStatus.FAIL, test.addScreenCapture(screen));
        } else if (result.getStatus() == ITestResult.STARTED) {
            test.log(LogStatus.INFO, result.getName() + " test is started");
        }
    }
//    public void waitForPageLoaded() {
//        ExpectedCondition<Boolean> expectation = new
//                ExpectedCondition<Boolean>() {
//                    public Boolean apply(WebDriver driver) {
//                        return ((JavascriptExecutor) driver).executeScript("return document.readyState").toString().equals("complete");
//                    }
//                };
//        try {
//            Thread.sleep(1000);
//            WebDriverWait wait = new WebDriverWait(driver, 30);
//            wait.until(expectation);
//        } catch (Throwable error) {
//            Assert.fail("Timeout waiting for Page Load Request to complete.");
//        }
//    }
}
